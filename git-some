#!/usr/bin/env bash
#
# Generates git commits using randomly-named files, one file per commit.
#
# USAGE: git-some <number of commits to generate>

# Fail script if something goes wrong.
set -o errexit

# Treat unset variables as an error, and immediately exit.
set -o nounset

options="\
%s
%s [number of commits]
%s [--message=<prefix>] [number of commits]

Create a number of random commits. By default, one commit is created.

Every commit creates one file named \"<x>.txt\", where \"x\" is a string
representing the current commit number, from \"A\" to \"Z\" and \"AA\" to
\"ZZ\", etc.

The commit message includes the current branch name (or \"detached HEAD\").
Optionally you can define a commit message prefix using the --message switch.
--
h,help          Show the help
m,message=prefix An optional commit message prefix"

# shellcheck disable=SC2059
printf -v options "$options" "${0##*/}" "${0##*/}" "${0##*/}"

eval "$(git rev-parse --parseopt -- "$@" <<< "$options" || echo exit $?)"

while (($# > 0)); do
  opt="$1"
  shift

  case "$opt" in
    -m)
      message="$1"
      shift
      ;;

    --)
      # Default to 1 commit unless specified otherwise.
      commit_count="${1-1}"

      if ! [[ "$commit_count" =~ ^[0-9]+$ ]]; then
        >&2 printf 'Need a positive number for number of commits to generate, got: %s\n' \
                   "$commit_count"

        exit 1
      fi

      break
      ;;

    *)
      >&2 printf 'Unexpected option: %s\n' "$opt"
      exit 1
      ;;
  esac
done

number-to-string() {
  local num="${1?Need number}"
  local chars=({A..Z})
  local base=${#chars[@]}
  local stack=()
  local index

  while ((num >= 0)); do
    if ((num < base)); then
      stack+=("$(printf '%s' "${chars[num]}")")
    else
      stack+=("$(printf '%s' "${chars[$((num % base))]}")")
    fi

    num=$((num / base - 1))
  done

  for ((index = ${#stack[@]} - 1; index >= 0; index--)); do
    printf '%s' "${stack[index]}"
  done
}

get-filename() {
  local number="${1?Need commit number}"

  printf -v filename "%s.txt" "$(number-to-string "$number")"

  if [[ -f "$filename" ]]; then
    >&2 printf '%s already exists but it should not.\n' "$filename"
    return 1
  fi

  printf '%s' "$filename"
}

if [[ ! -v message ]]; then
  message="$(git symbolic-ref --quiet --short HEAD || printf 'detached HEAD')"
fi

number_of_commits="$(git rev-list --all --count)"

for ((commit = 0; commit < commit_count; commit++)); do
  filename="$(get-filename $((number_of_commits + commit)))"

  # Create file.
  printf 'contents for %s\n' "$filename" > "$filename"

  # Stage file.
  if ! git add -- "$filename"; then
    rm -f -- "$filename"
    exit 2
  fi

  # Create commit.
  if ! git commit --message "$message: $filename"; then
    git rm --force -- "$filename" > /dev/null
    exit 4
  fi

  printf '\n'
done
